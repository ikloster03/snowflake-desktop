#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ src/i18n.ts
function analyzeI18nConfig() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ i18n...\n');

  try {
    const i18nPath = 'src/i18n.ts';
    const content = fs.readFileSync(i18nPath, 'utf8');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã
    const importMatches = content.match(/import\s*{\s*(\w+)\s*}\s*from\s*['"]([^'"]+)['"]/g);
    const imports = [];

    if (importMatches) {
      for (const match of importMatches) {
        const parts = match.match(/import\s*{\s*(\w+)\s*}\s*from\s*['"]([^'"]+)['"]/);
        if (parts) {
          imports.push({
            name: parts[1],
            path: parts[2]
          });
        }
      }
    }

    console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã i18n:');
    imports.forEach((imp, index) => {
      console.log(`  ${index + 1}. ${imp.name} –∏–∑ ${imp.path}`);
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    const enUsMatch = content.match(/'en-US':\s*{([^}]+)}/s);
    const ruRuMatch = content.match(/'ru-RU':\s*{([^}]+)}/s);

    if (enUsMatch) {
      console.log('\nüá∫üá∏ –ü–æ—Ä—è–¥–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è en-US:');
      const spreads = enUsMatch[1].match(/\.\.\.(\w+)\['en-US'\]/g);
      if (spreads) {
        spreads.forEach((spread, index) => {
          const name = spread.match(/\.\.\.(\w+)\[/)[1];
          console.log(`  ${index + 1}. ${name}`);
        });
      }
    }

    if (ruRuMatch) {
      console.log('\nüá∑üá∫ –ü–æ—Ä—è–¥–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ru-RU:');
      const spreads = ruRuMatch[1].match(/\.\.\.(\w+)\['ru-RU'\]/g);
      if (spreads) {
        spreads.forEach((spread, index) => {
          const name = spread.match(/\.\.\.(\w+)\[/)[1];
          console.log(`  ${index + 1}. ${name}`);
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    console.log('\n‚ö†Ô∏è  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:');

    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–∏
    const knownConflicts = [
      {
        key: 'profile',
        files: ['profileI18n', 'drawerLeftMenuI18n'],
        description: '–ö–ª—é—á "profile" –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Å—ã–ª–∫–æ–π –≤ –º–µ–Ω—é'
      },
      {
        key: 'save',
        files: ['profileI18n', 'projectI18n', 'bookI18n'],
        description: '–ö–ª—é—á "save" –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö'
      },
      {
        key: 'title',
        files: ['profileI18n', 'projectI18n', 'bookI18n', 'stageI18n'],
        description: '–ö–ª—é—á "title" –æ—á–µ–Ω—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω –∏ –º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å'
      }
    ];

    knownConflicts.forEach(conflict => {
      console.log(`\nüî• –í–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–ª—é—á–∞ "${conflict.key}":`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${conflict.description}`);
      console.log(`   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: ${conflict.files.join(', ')}`);
    });

    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è');
    console.log('2. –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±—â–∏—Ö –∫–ª—é—á–µ–π —Ç–∏–ø–∞ "save", "title", "profile" –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ');
    console.log('3. –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ –º–æ–¥—É–ª—è–º: { moduleName: { key: value } }');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤ src/i18n.ts');

    console.log('\nüîß –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–∂–¥—ã–π i18n —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª—é—á–µ–π');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è —É–Ω–∏–∫–∞–ª—å–Ω—ã –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏');
    console.log('3. –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∫–ª—é—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: profile ‚Üí profileLink)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function checkSpecificFiles() {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–∞—Ö:');

  const filesToCheck = [
    { name: 'profile.i18n.ts', path: 'src/modules/profile/profile.i18n.ts' },
    { name: 'drawer-left-menu.i18n.ts', path: 'src/modules/layouts/sidebar-menu/drawer-left-menu.i18n.ts' }
  ];

  filesToCheck.forEach(file => {
    try {
      const content = fs.readFileSync(file.path, 'utf8');
      console.log(`\nüìÑ ${file.name}:`);

      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
      const enUsMatch = content.match(/'en-US':\s*{([^}]+)}/);
      if (enUsMatch) {
        const keys = enUsMatch[1].match(/(\w+):/g);
        if (keys) {
          const topLevelKeys = keys.map(key => key.replace(':', ''));
          console.log(`   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${topLevelKeys.join(', ')}`);
        }
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeI18nConfig();
checkSpecificFiles();
