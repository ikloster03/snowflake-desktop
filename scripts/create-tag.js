#!/usr/bin/env node

import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

const PACKAGE_JSON_PATH = join(rootDir, 'package.json');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç git –∫–æ–º–∞–Ω–¥—É
 */
function execGit(command) {
  try {
    const result = execSync(command, {
      cwd: rootDir,
      encoding: 'utf8',
      stdio: ['pipe', 'pipe', 'pipe']
    });
    return result.trim();
  } catch (error) {
    throw new Error(`Git command failed: ${command}\n${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */
function checkWorkingDirectory() {
  try {
    const status = execGit('git status --porcelain');
    return status.length === 0;
  } catch (error) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
 */
function tagExists(tagName) {
  try {
    execGit(`git rev-parse ${tagName}`);
    return true;
  } catch (error) {
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
 */
function getCurrentVersion() {
  const content = readFileSync(PACKAGE_JSON_PATH, 'utf8');
  const packageJson = JSON.parse(content);
  return packageJson.version;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–≥
 */
function createAndPushTag(version, force = false) {
  const tagName = `v${version}`;

  console.log(`Creating tag: ${tagName}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–≥
  if (tagExists(tagName) && !force) {
    throw new Error(`Tag ${tagName} already exists. Use --force to overwrite.`);
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
  const tagCommand = force
    ? `git tag -f ${tagName} -m "Release ${tagName}"`
    : `git tag ${tagName} -m "Release ${tagName}"`;

  execGit(tagCommand);
  console.log(`‚úÖ Created tag: ${tagName}`);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥
  const pushCommand = force
    ? `git push origin ${tagName} --force`
    : `git push origin ${tagName}`;

  execGit(pushCommand);
  console.log(`‚úÖ Pushed tag: ${tagName}`);

  return tagName;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const args = process.argv.slice(2);
  const force = args.includes('--force') || args.includes('-f');

  if (args.includes('--help') || args.includes('-h')) {
    console.log('Usage: node create-tag.js [--force]');
    console.log('');
    console.log('Creates and pushes a git tag based on current package.json version');
    console.log('');
    console.log('Options:');
    console.log('  --force, -f    Overwrite existing tag');
    console.log('  --help, -h     Show this help message');
    console.log('');
    console.log('Examples:');
    console.log('  pnpm version:tag       # Create tag from current version');
    console.log('  pnpm version:release   # Update patch version and create tag');
    process.exit(0);
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const currentVersion = getCurrentVersion();
    console.log(`Current version: ${currentVersion}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (!checkWorkingDirectory()) {
      console.log('‚ö†Ô∏è  Warning: You have uncommitted changes in your working directory.');
      console.log('   Consider committing them before creating a tag.');
      console.log('');
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥
    const tagName = createAndPushTag(currentVersion, force);

    console.log('');
    console.log(`üéâ Successfully created and pushed tag: ${tagName}`);
    console.log('');
    console.log('GitHub Actions will now:');
    console.log('- Build the application for all platforms');
    console.log('- Create a GitHub Release');
    console.log('- Attach build artifacts to the release');
    console.log('');
    console.log(`View the release at: https://github.com/YOUR_USERNAME/YOUR_REPO/releases/tag/${tagName}`);

  } catch (error) {
    console.error('‚ùå Error creating tag:', error.message);
    process.exit(1);
  }
}

main();
