name: 'Release'

on:
  push:
    tags: ['v*']
  workflow_dispatch:  # Добавляет ручной запуск

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Snowflake v${process.env.PACKAGE_VERSION}`,
              body: 'Смотрите assets для загрузки файлов приложения.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libssl-dev \
            pkg-config

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Optimize for Windows build (prevent EMFILE)
        if: matrix.platform == 'windows-latest'
        run: |
          # Increase file handle limits for Node.js on Windows
          echo "UV_THREADPOOL_SIZE=128" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=4096" >> $GITHUB_ENV
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-22.04
    needs: [create-release, build-tauri]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -pe "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create and upload latest.json
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const version = process.env.PACKAGE_VERSION;

            // Get release info
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id
            });

            // Create latest.json content
            const latestJson = {
              version: `v${version}`,
              notes: release.body,
              pub_date: release.published_at || new Date().toISOString(),
              platforms: {}
            };

            // Add platform-specific download URLs
            for (const asset of release.assets) {
              if (asset.name.includes('_x64-setup.exe')) {
                latestJson.platforms['windows-x86_64'] = {
                  signature: '',
                  url: asset.browser_download_url
                };
              } else if (asset.name.includes('_amd64.AppImage')) {
                latestJson.platforms['linux-x86_64'] = {
                  signature: '',
                  url: asset.browser_download_url
                };
              }
            }

            // Convert to JSON string
            const latestJsonContent = JSON.stringify(latestJson, null, 2);

            // Upload latest.json as release asset directly
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              name: 'latest.json',
              data: Buffer.from(latestJsonContent, 'utf8'),
              headers: {
                'content-type': 'application/json'
              }
            });

            console.log('✅ latest.json created and uploaded successfully');
            console.log('Content:', latestJsonContent);

      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
